- sample = @category.classify.constantize.new
.container  
  .row
    .small-12.columns.text-left
      %h2
        - if agent_signed_in?
          - if @agent != current_agent
            = "Agent #{@agent.surname}: "
        = @agent.categories.year(getYear).first.send(@category.tableize).to_s rescue @category.pluralize
        %span.sort
          = link_to fa_icon('sort-amount-asc'), '#', onclick: '$("#view_options").slideToggle();return false;'
          - if agent_signed_in?
            - if @agent == current_agent
              - if sample.has_master?
                = link_to fa_icon("plus-square-o"), '#', :"data-reveal-id" => "prompt_#{sample.class.table_name.singularize}"
              - else
                = link_to fa_icon("plus-square-o"), "/agents/#{current_agent.id.to_s}/#{@category.tableize}/new"
      %p.table_count_stats
        = pluralize(@items.total_count, 'record')
        returned.
  .row
    .small-12.columns
      - if @category == 'Movie' 
        - if controller.action_name != 'shorts'
          - if @agent.profile(getYear).shortfilms
            - @items = @items.where.not(is_short: true)
            = link_to 'See short films', shorts_agent_movies_path(:agent_id => @agent.id), class: [:tiny, :secondary, :button]
        - else
          = link_to 'See feature-length films', agent_movies_path(:agent_id => @agent.id), class: [:tiny, :secondary, :button]
      - elsif @category == 'Music'
        - if agent_signed_in?
          - if current_agent == @agent
            = link_to_if current_agent == @agent, 'Suggest unreviewed', unreviewed_agent_musics_path, class: [:tiny, :secondary, :button]

  .row#view_options{style: (@items.empty? || @filters == true  ? "display: block" : false) }
    = form_for :filter, url: "/agents/#{@agent.slug}/#{@category.tableize}/", method: :get do |f|
      .large-1.small-4.columns
        %label Per page
        = f.text_field :per, value: @per, :required => true
      .large-2.small-4.columns
        %label Start date
        = f.text_field :start_date, class: 'date_input', value: @start_date
      .small-4.large-2.columns
        %label End date
        = f.text_field :end_date, class: 'date_input', value: @end_date
      .small-12.columns.large-2.column_filter
        %label Sort by
        
        = f.select :sort, @view.columns_for_category(sample.class).map{|x| [@view.agent_column_name(sample, x).to_s.humanize, x.to_sym] }, selected: @sort
        .tiny_select= f.select :sort_direction, [['Down', 'desc'], ['Up', 'asc']] , selected: @sort_direction
      .small-8.large-2.columns.text_filter
        %label Filter by text
        = f.text_field :filter_text, value: @filter_text
      .small-2.columns.end
        
        = f.submit 'Filter', class: [:button, :tiny, :secondary]
  .row
    .small-12.columns= paginate @items
  .row
    .small-12.columns
      - unless @items.blank?

        %table.responsive#classic{:border => 0}
          %thead
            - @view.columns_for_category(@items[0].class).each do |col|

              - next if col == 'venue_address'
              %th= @view.agent_column_name(@items[0], col).to_s.humanize

          %tbody#results
            = render :partial => '/agent', :collection => @items
            
          
      - if @items.blank?
        %p Sorry, no entries were found.
      - else 
        = paginate @items
        -#= pageless(@items.total_pages, url_for(@items.first.class.table_name))
  .row
    .small-12.columns.totals
      Totals:
      %p
        Entries:
        = @items.size.to_s + " shown, out of "
        = @items.total_count.to_s + " returned from filters"
      - if @items.first.respond_to?('cost')
        .sums
          Total cost:
          - @items.group_by(&:currency_id).each do |currency|
            - c = Currency.find(currency.first)
            .line= number_to_currency(currency.last.map(&:cost).sum, unit: c.symbol.html_safe, format: c.unitafter == true ? "%n%u" : "%u%n")
        .averages
          - @items.group_by(&:currency_id).each do |currency|
            - c = Currency.find(currency.first)
            .line= number_to_currency((currency.last.map(&:cost).sum / currency.last.count).to_f,  unit: c.symbol.html_safe, format: c.unitafter == true ? "%n%u" : "%u%n") + " per item"
            - unless @items.map(&:date).max == @items.map(&:date).min

              .line= number_to_currency((currency.last.map(&:cost).sum / (@items.map(&:date).max - @items.map(&:date).min).to_i).to_f,  unit: c.symbol.html_safe, format: c.unitafter == true ? "%n%u" : "%u%n") + " per day"
= content_for :jquery do
  :plain
    $('.date_input').datepicker({dateFormat: 'yy-mm-dd'});

    $('#filter_start_date').change( function() {
      if ($('#filter_start_date').val() > $('#filter_end_date').val()) {
        alert('Start date has to be before end date!');
        $('#filter_start_date').val($('#filter_end_date').val());
      }
    });
